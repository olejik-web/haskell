(getTankModel firstTank) (getTankAttack firstTank) (getTankHealth firstTank) (getTankModel secondTank) (getTankAttack secondTank) (getTankHealth secondTank)

battle 1 (getTankModel t34) (getTankAttack t34) (getTankHealth t34) (getTankModel tiger) (getTankAttack tiger) (getTankHealth tiger)


| (getTankHealth (fight (fight firstTank secondTank) firstTank)) <= 0 = secondTank
            | otherwise = battle (n - 1) firstTank secondTank  
  
  where hpAfterDmg
            | ((getTankHealth dTank) - (getTankAttack aTank)) <= 0 = 0
            | otherwise = ((getTankHealth dTank) - (getTankAttack aTank))

where enemyA = getTankAttack aTank
          m = getTankModel dTank
          a = getTankAttack dTank
          hp = getTankHealth dTank

let myCupAfterManySips = foldl makeSipFromCup myCap

someHuman.getHeight()
getHeight someHuman

f $ x = f x
g a b c d -> (((g a) b) d)

reverse' :: [a] -> [a]
reverse' [] = []
reverse' (x:xs) = reverse' xs ++ [x]

maximum' :: (Ord a) => [a] -> a

take' 3 [1, 2, 3, 4, 5, 6]
1:take' 2 [2, 3, 4, 5, 6]
1:2:take' 1 [3, 4, 5, 6]
1:2:3:take' 0 [4, 5, 6]
1:2:3:[]
[1, 2, 3]

[5, 4, 2, 7, 8, 10]
[2, 4] ++ [5] ++ [7, 8, 10]

max :: Ord a => a -> (a -> a)

sumThree 10 -> sumThreeTen b c
sumThreeTen 1 -> sumThreeTenOne c

flip' :: (a -> b -> c) -> (b -> a -> c)
flip' f = g
    where g x y = f y x

map' :: (a -> b) -> [a] -> [b]
map' _ [] = []
map' f (x:xs) = (f x) : map' f xs

1. acc = 0
x = (x:_)
2. acc = acc + x
y = (x:y:_)
3. acc = acc + x + y
z = (x:y:z:_)

elem' :: (Eq a) => a -> [a] -> Bool
elem' _ [] = False
elem' a (x:xs)
    | a == x = True
    | otherwise = elem' a xs

foldr - f 3 (f 4 (f 5 (f 6 acc)))
foldl - f (f (f (f acc 3) 4) 5) 6